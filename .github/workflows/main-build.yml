name: Docker Build/Publish Image
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      DOCKER_REGISTRY: docker.io
      DOCKER_IMAGE: cboin/pigbot
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_TARGET_PLATFORM_ARM: linux/arm64/v8
      DOCKER_TARGET_PLATFORM_x64: linux/amd64
      DOCKER_PUSH: false
    steps:
      - uses: actions/checkout@main
      - name: Get Commit or Tag
        id: vars
        run: |
          tag="${GITHUB_SHA:0:8}"
          if [ "${GITHUB_EVENT_NAME}" == "release" ]; then
            ref="${GITHUB_REF}"
            tag=$(echo $GITHUB_REF | sed 's/refs\/tags\///g')
          fi
          echo "TAG=$tag" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Prepare
        if: success()
        id: prepare
        run: |
          echo "DOCKER_PLATFORM_ARM=${DOCKER_TARGET_PLATFORM_ARM}" >> $GITHUB_OUTPUT
          echo "DOCKER_PLATFORM_AMD64=${DOCKER_TARGET_PLATFORM_x64}" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE=${DOCKER_REGISTRY}/${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          echo "VERSION=${{steps.vars.outputs.tag}}" >> $GITHUB_OUTPUT
      - name: Docker Login
        if: success()
        run: |
          echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin
      - name: Run Buildx
        if: success()  && github.event_name == 'pull_request' # trigger only a build on PR's.
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.DOCKER_PLATFORM_ARM }},${{ steps.prepare.outputs.DOCKER_PLATFORM_AMD64 }} \
          -t ${{ steps.prepare.outputs.DOCKER_IMAGE }}:${{steps.prepare.outputs.VERSION}} \
          -t ${{ steps.prepare.outputs.DOCKER_IMAGE }}:latest \
          --file ./Dockerfile -o type=image,push=false .
      - name: Run Buildx (push image)
        if: success()  && github.event_name == 'push' # trigger a build and push to docker registry
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.DOCKER_PLATFORM_ARM }},${{ steps.prepare.outputs.DOCKER_PLATFORM_AMD64 }} \
          -t ${{ steps.prepare.outputs.DOCKER_IMAGE }}:${{steps.prepare.outputs.VERSION}} \
          -t ${{ steps.prepare.outputs.DOCKER_IMAGE }}:latest \
          --file ./Dockerfile -o type=image,push=true .
